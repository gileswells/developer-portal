name: Build Pull Request Deployment Packages

on:
  pull_request:
    branches: [master]

jobs:
  sender:
    runs-on: ubuntu-latest
    outputs:
      githash: ${{ steps.sending.outputs.hash }}
    steps:
      - uses: actions/checkout@v2

      - id: sending
        name: Send git hash
        run: GIT_HASH=$(/bin/bash -c "git log --oneline | cut -f3 -d \" \" | cut -c1-7");
          echo $GIT_HASH
          echo "::set-output name=hash::$GIT_HASH"

  receiver:
    runs-on: ubuntu-latest
    needs: [sender]
    steps:
      - id: receiving
        name: Receive git hash
        run: echo ${{ needs.sender.outputs.githash }}

  install:
    runs-on: ubuntu-latest
    outputs:
      githash: ${{ steps.githash.outputs.hash }}
    steps:
      - uses: actions/checkout@v2

      - id: githash
        name: Git log?
        run: echo "::set-output name=hash::$(/bin/bash -c 'git log --oneline | cut -f3 -d " " | cut -c1-7')"

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: developer-portal-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Install dependencies
        run: npm ci

  builds:
    needs: [install]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: ['dev', 'staging', 'production']

    steps:
      - uses: actions/checkout@v2

      - name: Print env
        run: printenv

      - name: Git log?
        run: git log | head 20

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: developer-portal-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 12

      - name: Install dependencies
        run: npm ci

      - name: Run Build
        env:
          NODE_ENV: production
          BUILD_ENV: ${{matrix.environment}}
          REACT_APP_COMMIT_HASH: ${{github.event.pull_request.head.sha}}
          S3_REVIEW_BUCKET: ${{secrets.AWS_S3_REVIEW_BUCKET}}
          PREVIEW_SENTRY_DSN: ${{secrets.PREVIEW_SENTRY_DSN}}
        run: |
          echo $COMMIT_HASH
          git_short_hash=$(git rev-parse --short "$COMMIT_HASH")
          cat <<EOF > .env.$BUILD_ENV.local
            PUBLIC_URL=/$S3_REVIEW_BUCKET/$git_short_hash/$BUILD_ENV
            REACT_APP_SENTRY_DSN=$PREVIEW_SENTRY_DSN
            EOF
          done
          npm run build $BUILD_ENV

      - name: Add deploy.json
        env:
          BUILD_ENV: ${{matrix.environment}}
          REACT_APP_COMMIT_HASH: ${{github.event.pull_request.head.sha}}
        run: |
          date > ./current-date
          echo '{' > build/$BUILD_ENV/deploy.json
          echo "  \"environment\": \"$BUILD_ENV\"," >> build/$BUILD_ENV/deploy.json
          echo "  \"date\": \"$( cat current-date )\"," >> build/$BUILD_ENV/deploy.json
          echo "  \"commit\": \"$REACT_APP_COMMIT_HASH\"" >> build/$BUILD_ENV/deploy.json
          echo '}' >> build/$BUILD_ENV/deploy.json
          rm ./current-date
          cat build/$BUILD_ENV/deploy.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
          role-to-assume: ${{secrets.AWS_ROLE_ARN}}
          role-duration-seconds: 1200
          role-session-name: GitHubActions

      - name: Upload to PR review s3 bucket
        env:
          COMMIT_HASH: ${{github.event.pull_request.head.sha}}
          S3_REVIEW_BUCKET: ${{secrets.AWS_S3_REVIEW_BUCKET}}
        run: |
          echo $COMMIT_HASH
          git_short_hash=$(git rev-parse --short "$COMMIT_HASH")
          aws s3 sync --no-progress --acl public-read build/ s3://$S3_REVIEW_BUCKET/gha-$git_short_hash/
  pr_comment:
    needs: [builds]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Add PR builds comment
        env:
          COMMIT_HASH: ${{github.event.pull_request.head.sha}}
          S3_REVIEW_BUCKET: ${{secrets.AWS_S3_REVIEW_BUCKET}}
          PRNUM: ${{github.event.issue.number}}
        run: |
          echo $COMMIT_HASH
          git_short_hash=$(git rev-parse --short "$COMMIT_HASH")
          links=""
          for env in ['dev', 'staging', 'production']; do
            links="$links - [${env}](https://s3-us-gov-west-1.amazonaws.com/$S3_REVIEW_BUCKET/$git_short_hash/$env/index.html) <br>"
          done
          echo $links;
          comment="These changes have been deployed to an s3 bucket. A build for each environment is available: <br><br> ${links} <br> due to s3 website hosting limitations in govcloud you need to first navigate to index.html explicitly."
          gh pr comment $PRNUM --body "$comment"
