name: Create Auto Deploy Maintenance Request

on:
  workflow_dispatch:
  schedule:
    - cron: '0 20 * * 1,2,3,4,5'

jobs:
  pre_mr_checks_and_create:
    runs-on: ubuntu-latest
    outputs:
      mr_number: ${{ steps.get_mr_number.outputs.mr_number }}
      time_string: ${{ steps.get_time_string.outputs.time_string }}
    steps:
      - name: Set timezone to Eastern
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: 'America/New_York'
      - id: check_for_existing_mr
        name: Check for existing MRs
        continue-on-error: true
        run: |
          echo ${{secrets.GIT_AUTO_DEPLOY_TOKEN}} | gh auth login --with-token
          gh issue list \
            -R 'department-of-veterans-affairs/lighthouse-devops-support' \
            -l 'repo: developer-portal' \
            --limit 1 \
            --json id,number,state,labels,title \
            > issue.json
          cat issue.json
          if [ "[]" == "$(cat issue.json)" ]; then
            :
          else
            # issue.json isn't an empty json array and there is currently an open MR tagged "repo: developer-portal"
            # Any open MR should cancel the creation of a new MR
            echo 'An MR is currently open so no new MR can be created'
            exit 1;
          fi
      - id: get_current_release_tag
        name: Get current release tag from production deploy.json
        run: |
          wget https://developer.va.gov/deploy.json
          CURRENT_RELEASE_TAG=`jq -r ".release" deploy.json`
          echo $CURRENT_RELEASE_TAG
          echo "::set-output name=current_release_tag::$CURRENT_RELEASE_TAG"
      - id: get_current_release_from_commit_hash
        name: Get currently deployed release tag from the commit hash if last deploy didn't use the release tag
        if: steps.get_current_release_tag.outputs.current_release_tag == ''
        run: |
          COMMIT_HASH=`jq -r ".commit" deploy.json`
          echo $COMMIT_HASH
          CURRENT_RELEASE_TAG=`gh api /repos/department-of-veterans-affairs/developer-portal/tags | jq -r ".[] | select(.commit.sha == \\\"$COMMIT_HASH\\\").name"`
          echo $CURRENT_RELEASE_TAG
          echo "::set-output name=current_release_tag::$CURRENT_RELEASE_TAG"
      - id: unified_current_release_tag
        name: Unify release tag regardless of how it was found
        env:
          current-release-tag: ${{ steps.get_current_release_tag.outputs.current_release_tag }}
          current-release-tag-from-commit-hash: ${{ steps.get_current_release_from_commit_hash.outputs.current_release_tag }}
        run: |
          if [ "" != "${{ env.current-release-tag }}" ]; then
            CURRENT_RELEASE_TAG=`echo ${{ env.current-release-tag }}`
          else
            CURRENT_RELEASE_TAG=`echo ${{ env.current-release-tag-from-commit-hash }}`
          fi
          echo $CURRENT_RELEASE_TAG
          echo "::set-output name=current_release_tag::$CURRENT_RELEASE_TAG"
      - id: get_proposed_release_tag
        name: Get the tag name of the latest release
        run: |
          PROPOSED_RELEASE_TAG=`gh api /repos/department-of-veterans-affairs/developer-portal/releases/latest | jq -r ".tag_name"`
          echo $PROPOSED_RELEASE_TAG
          echo "::set-output name=proposed_release_tag::$PROPOSED_RELEASE_TAG"
      - id: check_if_new_release
        name: Check if the latest release is newer than production
        continue-on-error: true
        env:
          current-release-tag: ${{steps.unified_current_release_tag.outputs.current_release_tag}}
          proposed-release-tag: ${{steps.get_proposed_release_tag.outputs.proposed_release_tag}}
        run: |
          if [ "${{ env.current-release-tag }}" == "${{ env.proposed-release-tag }}" ]; then
            echo "Production already has ${{ env.proposed-release-tag }} in production. Cancel MR creation."
            exit 1;
          else
            echo "Production is not yet at ${{ env.proposed-release-tag }}. Continuing with MR creation."
          fi
      - id: create_mr
        name: Generate the MR body text and create MR
        env:
          current-release-tag: ${{ steps.unified_current_release_tag.outputs.current_release_tag }}
          proposed-release-tag: ${{ steps.get_proposed_release_tag.outputs.proposed_release_tag }}
        if: |
          steps.check_for_existing_mr.outcome == 'success'
          && steps.check_if_new_release.outcome == 'success'
        run: |
          wget https://raw.githubusercontent.com/department-of-veterans-affairs/developer-portal/master/.github/workflows/assets/maintenance-request.md
          TEMPLATE_ISSUE_LABEL=`grep labels maintenance-request.md | cut -f2 -d " "`
          TEMPLATE_ASSIGNEE=`grep assignees maintenance-request.md | cut -f2 -d " "`
          sed -i -e '1,8d' maintenance-request.md
          # Set MR template variables
          DAY_OF_THE_WEEK=`date +%A`
          if [ "Friday" == "$DAY_OF_THE_WEEK" ]; then
            PROPOSED_WINDOW_OPENING=`date --date="10:00 next Monday" +"%Y/%m/%d %H:%M %Z"`
            PROPOSED_WINDOW_CLOSING=`date --date="10:30 next Monday" +"%Y/%m/%d %H:%M %Z"`
          else
            PROPOSED_WINDOW_OPENING=`date --date="10:00 tomorrow" +"%Y/%m/%d %H:%M %Z"`
            PROPOSED_WINDOW_CLOSING=`date --date="10:30 tomorrow" +"%Y/%m/%d %H:%M %Z"`
          fi

          # Get the releases
          gh api /repos/department-of-veterans-affairs/developer-portal/releases > releases.json
          CURRENT_RELEASE_ID=`jq ".[] | select(.tag_name == \"${{ env.current-release-tag }}\") | .id" releases.json`
          PROPOSED_RELEASE_PRS=`jq -r ".[] | select(.id > $CURRENT_RELEASE_ID ) | \"- \" + .name + \"\"" releases.json | sed -E 's/(.*)\#([0-9]{1,})\)/\2/'`
          echo '```' > maintainer-notes.txt
          echo "Release tag: ${{ env.proposed-release-tag }}" >> maintainer-notes.txt
          echo "Rollback tag: ${{ env.current-release-tag }}" >> maintainer-notes.txt
          echo '```' >> maintainer-notes.txt
          touch user-notes.txt
          for pr in `echo $PROPOSED_RELEASE_PRS`; do
            gh api /repos/department-of-veterans-affairs/developer-portal/pulls/$pr > pr-$pr.json
            if [ "impact: maintainers" == "`jq -r '.labels[] | select(.name == \"impact: maintainers\") .name' pr-$pr.json`" ]; then
              echo "- " `jq -r '.title' pr-$pr.json` "[#$pr](https://github.com/department-of-veterans-affairs/developer-portal/pull/$pr)" >> maintainer-notes.txt
            fi
            if [ "impact: users" == "`jq -r '.labels[] | select(.name == \"impact: users\") .name' pr-$pr.json`" ]; then
              echo "- " `jq -r '.title' pr-$pr.json` "[#$pr](https://github.com/department-of-veterans-affairs/developer-portal/pull/$pr)" >> user-notes.txt
            fi
          done
          DEPLOYMENT_COMMAND="aws codebuild start-build --project-name developer-portal-deploy --environment-variables-override \"[{\\\"name\\\":\\\"ENVIRONMENTS\\\",\\\"value\\\":\\\"production\\\"},{\\\"name\\\":\\\"MR\\\",\\\"value\\\":\\\"[MR_NUMBER]\\\"},{\\\"name\\\":\\\"RELEASE\\\",\\\"value\\\":\\\"${{ env.proposed-release-tag }}\\\"}]\""
          ROLLBACK_COMMAND="aws codebuild start-build --project-name developer-portal-deploy --environment-variables-override \"[{\\\"name\\\":\\\"ENVIRONMENTS\\\",\\\"value\\\":\\\"production\\\"},{\\\"name\\\":\\\"MR\\\",\\\"value\\\":\\\"[MR_NUMBER]\\\"},{\\\"name\\\":\\\"RELEASE\\\",\\\"value\\\":\\\"${{ env.current-release-tag }}\\\"}]\""
          ISSUE_TITLE="Deploy developer-portal to production ($PROPOSED_WINDOW_OPENING)"

          # Replace values in issue template
          echo $PROPOSED_WINDOW_OPENING
          sed -i "s|__proposed_start_date_time__|$PROPOSED_WINDOW_OPENING|g" maintenance-request.md
          echo $PROPOSED_WINDOW_CLOSING
          sed -i "s|__proposed_end_date_time__|$PROPOSED_WINDOW_CLOSING|g" maintenance-request.md
          # File splicing for maintainer notes
          cat maintainer-notes.txt
          sed -n '1,/^MAINTAINER_NOTES$/p' maintenance-request.md | sed \$d > temp-notes.md
          cat maintainer-notes.txt >> temp-notes.md
          sed '1,/^MAINTAINER_NOTES$/d' maintenance-request.md >> temp-notes.md
          mv temp-notes.md maintenance-request.md
          # File splicing for user notes
          cat user-notes.txt
          sed -n '1,/^USER_NOTES$/p' maintenance-request.md | sed \$d > temp-notes.md
          cat user-notes.txt >> temp-notes.md
          sed '1,/^USER_NOTES$/d' maintenance-request.md >> temp-notes.md
          mv temp-notes.md maintenance-request.md
          echo $DEPLOYMENT_COMMAND
          sed -i "s|DEPLOYMENT_COMMAND|$DEPLOYMENT_COMMAND|g" maintenance-request.md
          echo $ROLLBACK_COMMAND
          sed -i "s|ROLLBACK_COMMAND|$ROLLBACK_COMMAND|g" maintenance-request.md

          cat maintenance-request.md

          gh issue create \
            -R 'department-of-veterans-affairs/lighthouse-devops-support' \
            --title "$ISSUE_TITLE" \
            --assignee "$TEMPLATE_ASSIGNEE" \
            --label "$TEMPLATE_ISSUE_LABEL" \
            --label "repo: developer-portal" \
            --body-file maintenance-request.md
      - uses: actions/checkout@v2
        if: steps.create_mr.outcome == 'success'
      - name: Enable Auto Deploy Workflow
        if: steps.create_mr.outcome == 'success'
        continue-on-error: true
        run: gh workflow enable 'Auto Deploy master to Production'
